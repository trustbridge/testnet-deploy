#!groovy

// Build pipeline for the devnet environment
// This pipeline provides a centralised point to control the build of the various components that make up the devnet deployment
// The pipeline expects to be called from other pipelines which will update the parameters of the repo they come from

pipeline {
    agent {
        label 'hamlet-latest'
    }
    options {
        timestamps ()
        buildDiscarder(
            logRotator(
                daysToKeepStr: '14'
            )
        )
        disableConcurrentBuilds()
        durabilityHint('PERFORMANCE_OPTIMIZED')
        parallelsAlwaysFailFast()
        checkoutToSubdirectory('deploy')
    }

    environment {
        properties_file = "/var/opt/properties/devnet.properties"
        GITHUB_CREDENTIALS = credentials('github')
    }

    parameters {
        string(
            name: 'branchref_ethereum_channel',
            defaultValue: 'master',
            description: 'The commit to use for the deploy'
        )

        booleanParam(
            name: 'force_ethereum_channel',
            defaultValue: false,
            description: 'Force build of channel api components'
        )
    }

    stages {
        stage('Setup') {
            steps {
                dir('ethereum_channel/') {
                    script {
                        def repoethereumChannel = checkout(
                            [
                                $class: 'GitSCM',
                                branches: [[name: "${params.branchref_ethereum_channel}" ]],
                                userRemoteConfigs: [[
                                    credentialsId: 'github',
                                    url: 'https://github.com/trustbridge/ethereum-channel'
                                ]]
                            ]
                        )
                        env.gitcommit_ethereum_channel = repoethereumChannel.GIT_COMMIT
                    }
                }
            }
        }

        stage('Build - ethereum Channel API - Lambda') {
            when {
                anyOf {
                    equals expected: true, actual: params.force_ethereum_channel
                    allOf {
                        not {
                            equals expected: 'master', actual: "${params.branchref_ethereum_channell}"
                        }
                        branch 'master'
                    }
                }
            }

            steps {
                echo "GIT_COMMIT is ${env.branchref_ethereum_channel}"

                dir('ethereum_channel/channel-api') {
                    sh '''#!/bin/bash
                        if [[ -d "${HOME}/.nodenv" ]]; then
                            export PATH="$HOME/.nodenv/bin:$PATH"
                            eval "$(nodenv init - )"
                            nodenv install 12.16.1 || true
                            nodenv shell 12.16.1
                        fi
                        npm ci
                        export PATH="$( npm bin ):$PATH"

                        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
                        export PATH="$HOME/.poetry/bin:$PATH"
                        poetry --version

                        sls package --package dist/
                    '''
                }
            }

            post {
                success {
                    dir('ethereum_channel/channel-api') {
                        archiveArtifacts artifacts: 'dist/channel-api.zip', fingerprint: true
                    }

                    slackSend (
                        message: "Build Completed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n Ethereum Channel API Lambda Build",
                        channel: "#igl-automatic-messages",
                        color: "#50C878"
                    )
                }

                failure {
                    slackSend (
                        message: "Build Failed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n Ethereum Channel API Lambda Build",
                        channel: "#igl-automatic-messages",
                        color: "#B22222"
                    )
                }
            }
        }

        stage('Artefact - ethereum Channel API - Lambda') {
            when {
                anyOf {
                    equals expected: true, actual: params.force_ethereum_channel
                    allOf {
                        not {
                            equals expected: 'master', actual: "${params.branchref_ethereum_channel}"
                        }
                        branch 'master'
                    }
                }
            }

            environment {
                //hamlet deployment variables
                deployment_units = 'ethchannel-api-imp'
                segment = 'channel'
                image_format = 'lambda'
                BUILD_SRC_DIR = 'ethereum_channel/channel-api'
            }

            steps {

                dir('ethereum_channel/channel-api') {
                    sh '''
                        cp dist/channel-api.zip dist/lambda.zip
                    '''
                }

                uploadImageToRegistry(
                    "${env.properties_file}",
                    "${env.deployment_units.split(',')[0]}",
                    "${env.image_format}",
                    "${env.gitcommit_ethereum_channel}"
                )

                build job: '../cote-c1/deploy', wait: false, parameters: [
                        extendedChoice(name: 'DEPLOYMENT_UNITS', value: "${env.deployment_units}"),
                        string(name: 'GIT_COMMIT', value: "${env.gitcommit_ethereum_channel}"),
                        booleanParam(name: 'AUTODEPLOY', value: true),
                        string(name: 'IMAGE_FORMATS', value: "${env.image_format}"),
                        string(name: 'SEGMENT', value: "${env.segment}")
                ]
            }

        }

        stage('Deploy - ethereum Channel API - API GW') {
            when {
                anyOf {
                    equals expected: true, actual: params.force_ethereum_channel
                    allOf {
                        not {
                            equals expected: 'master', actual: "${params.branchref_ethereum_channel}"
                        }
                        branch 'master'
                    }
                }
            }

            environment {
                //hamlet deployment variables
                deployment_units = 'ethchannel-api'
                segment = 'channel'
                image_format = 'openapi'
                BUILD_SRC_DIR = 'ethereum_channel/channel-api/'

            }

            steps {

                dir('ethereum_channel/channel-api/') {
                    sh '''
                    mv openapi.json openapi-extended-base.json
                    zip -j openapi.zip openapi-extended-base.json
                    cp openapi.zip dist/openapi.zip
                    '''
                }

                uploadImageToRegistry(
                    "${env.properties_file}",
                    "${env.deployment_units.split(',')[0]}",
                    "${env.image_format}",
                    "${env.gitcommit_ethereum_channel}"
                )

                build job: '../cote-c1/deploy', wait: false, parameters: [
                        extendedChoice(name: 'DEPLOYMENT_UNITS', value: "${env.deployment_units}"),
                        string(name: 'GIT_COMMIT', value: "${env.gitcommit_ethereum_channel}"),
                        booleanParam(name: 'AUTODEPLOY', value: true),
                        string(name: 'IMAGE_FORMATS', value: "${env.image_format}"),
                        string(name: 'SEGMENT', value: "${env.segment}")
                ]
            }

        }
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}


void uploadImageToRegistry( properties_file, deployment_unit, image_format, git_commit )   {

    script {
        env['deployment_unit'] = "${deployment_unit}"
        env['image_format'] = "${image_format}"
        env['unit_git_commit'] = "${git_commit}"
    }

    // Product Setup
    script {
        def contextProperties = readProperties interpolate: true, file: "${properties_file}" ;
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
    ${AUTOMATION_BASE_DIR}/setContext.sh || exit $?
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
    ${AUTOMATION_DIR}/manageImages.sh -g "${unit_git_commit}" -u "${deployment_unit}" -f "${image_format}"  || exit $?
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

}
